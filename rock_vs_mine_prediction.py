# -*- coding: utf-8 -*-
"""Rock Vs Mine Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14H1p8tYqUJKbnsO6sjqvJu5vtZA8RSGP
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

data=pd.read_csv('/content/drive/MyDrive/datasets/sonar data.csv',header=None)

data.head()

data.shape

data.describe()

data.isnull().sum()

data[60].value_counts()

data.groupby(60).mean()

X=data.drop(columns=60,axis=1)
Y=data[60]

print(X)

print(Y)

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.1,random_state=1,stratify=Y)

#stratify--> helps in splitting the data equally

print(X)

print(X_train)

print(X_test)

"""Model Training---> Logistic Regression Model(Used mainly for binary related problem like there will be only 2 option and only 1 answer. Then this is the best model to be used)"""

model=LogisticRegression()

#Training the model
model.fit(X_train,Y_train)

"""Model Evolution"""

#Accuracy on training data
X_train_pred=model.predict(X_train)
X_train_accuarcy=accuracy_score(X_train_pred,Y_train)

print("Accuracy of train data: ",X_train_accuarcy )

#Accuracy of test data
X_test_pred=model.predict(X_test)
X_test_accuracy=accuracy_score(X_test_pred,Y_test)

print("Accuracy of test data:",X_test_accuracy)

"""Making a Predictive System"""

input_data=(0.0093,0.0185,0.0056,0.0064,0.0260,0.0458,0.0470,0.0057,0.0425,0.0640,0.0888,0.1599,0.1541,0.2768,0.2176,0.2799,0.3491,0.2824,0.2479,0.3005,0.4300,0.4684,0.4520,0.5026,0.6217,0.6571,0.6632,0.7321,0.8534,1.0000,0.8448,0.6354,0.6308,0.6211,0.6976,0.5868,0.4889,0.3683,0.2043,0.1469,0.2220,0.1449,0.1490,0.1211,0.1144,0.0791,0.0365,0.0152,0.0085,0.0120,0.0022,0.0069,0.0064,0.0129,0.0114,0.0054,0.0089,0.0050,0.0058,0.0025)

array=np.asarray(input_data)
array_reshape=array.reshape(1,-1)

prediction=model.predict(array_reshape)
#Here we use reshape function bcoz ml models only can analyze in 2D array, so by doing reshape we can convert a 1D array to a 2D Array
print(prediction)

if (prediction[0]=='M'):
  print("It is a Mine...!!\nDanger...")
else:
  print("It is a Rock...!!\nChomu he ye")